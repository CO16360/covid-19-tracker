{"version":3,"sources":["CountryPicker.js","App.js","serviceWorker.js","index.js"],"names":["CountryPicker","props","handleChange","event","value","target","handleCountryChange","state","countries","country","this","fetchCountries","axios","get","then","response","setState","data","FormControl","NativeSelect","onChange","key","map","c","name","React","Component","App","confirmed","recovered","death","lastupdate","console","log","deaths","lastUpdate","getData","Axios","Fragment","className","Date","toDateString","start","end","separator","duration","style","fontSize","marginTop","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.1616fefd.chunk.js","sourcesContent":["import React from 'react';\r\nimport {NativeSelect,FormControl} from '@material-ui/core';\r\n\r\nimport axios from 'axios';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport './styles.css';\r\n\r\nclass CountryPicker extends React.Component {\r\n\r\n    constructor(props){\r\n        super(props);\r\n        this.state={\r\n            countries:[],\r\n            country:\"\"\r\n        }\r\n    }\r\n\r\ncomponentDidMount(){\r\n    this.fetchCountries()\r\n}\r\nfetchCountries(){\r\n    axios.get(\"https://covid19.mathdro.id/api/countries\").\r\n    then(response=>{\r\n        this.setState({countries:response.data.countries});\r\n       \r\n    }\r\n        \r\n    )\r\n}\r\n\r\nhandleChange=(event)=>{\r\n    var value=event.target.value;\r\n    this.props.handleCountryChange(value);\r\n\r\n\r\n}\r\n\r\n    render(){\r\n        \r\n        return(\r\n            <center>\r\n            <FormControl>\r\n                <NativeSelect  onChange={this.handleChange} >\r\n                    <option  key=\"global\" value=\"global\">Global</option>\r\n                        {\r\n                            this.state.countries.map(c=>(\r\n                            <option  key={c.name} value={c.name}>{c.name}</option>\r\n                            ))\r\n\r\n                            \r\n                        }    \r\n\r\n                    </NativeSelect>\r\n                </FormControl>\r\n                </center>\r\n\r\n        )\r\n    }\r\n\r\n}\r\nexport default  CountryPicker;","import React from 'react';\nimport axios from 'axios';\nimport Axios from 'axios';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './styles.css';\nimport CountryPicker from './CountryPicker';\nimport CountUp from 'react-countup';\n\nclass App extends React.Component {\n  state = {\n    confirmed: \"\",\n    recovered: \"\",\n    death: \"\",\n    lastupdate: \"\",\n    country:\"\"\n  }\n\n  componentDidMount() {\n    this.getData();\n  }\n\n  handleCountryChange=(country)=>{\n    console.log(country);\n    if(country!=\"global\"){\n     axios.get(\"https://covid19.mathdro.id/api/countries/\"+country)\n     .then(response=>{\n       this.setState({\n        confirmed: response.data.confirmed.value,\n        recovered: response.data.recovered.value,\n        death: response.data.deaths.value,\n        lastupdate: response.data.lastUpdate\n       })\n     }\n     )}\n     else{\n       this.getData();\n     }\n  }\n\n  getData() {\n    Axios.get(\"https://covid19.mathdro.id/api\")\n      .then(response => {\n        this.setState({\n          confirmed: response.data.confirmed.value,\n          recovered: response.data.recovered.value,\n          death: response.data.deaths.value,\n          lastupdate: response.data.lastUpdate\n        })\n      })\n\n  }\n\n  render() {\n    // if(!this.state.confirmed)\n    // {\n    //   return 'loading'\n    // }\n    return (\n      <React.Fragment>\n        <div className=\"container\">\n          <div>\n            <div className=\"name\">\n            <center>Covid-19 Tracker</center>\n            </div>\n            <center>\n              <p className=\"text-primary lastupdate\"><u>\n            Last updated: {new Date(this.state.lastupdate).toDateString()}\n            </u></p>\n            </center>\n          </div>\n          <CountryPicker handleCountryChange={this.handleCountryChange}/>\n          \n          <div className=\"card-deck\">\n            <div className=\"card confirm\">\n              <div className=\"card-title\">\n                <center>Confirmed</center>\n              </div>\n              <div className=\"card-body text-center\">\n                <CountUp\n                start={0}\n                end={this.state.confirmed}\n                separator=\",\"\n                duration={1}\n                className=\"number\"\n                />\n                \n              </div>\n            </div>\n            <div className=\"card recovered\">\n              <div className=\"card-title\">\n                <center>Recovered</center>\n              </div>\n              <div className=\"card-body text-center\">\n              <CountUp\n                start={0}\n                end={this.state.recovered}\n                separator=\",\"\n                duration={1}\n                />\n              </div>\n            </div>\n\n            <div className=\"card deaths\">\n              <div className=\"card-title\">\n                <center> Deaths</center>\n              </div>\n              <div className=\"card-body text-center\">\n              <CountUp\n                start={0}\n                end={this.state.death}\n                separator=\",\"\n                duration={1}\n                />\n              </div>\n            </div>\n          </div>\n\n        </div>\n        <center> <p className=\"text text-primary\" style={{fontSize:\"0.7em\", marginTop:\"20px\"}}><u>Source: John Hopkins University</u></p></center>\n\n      </React.Fragment>\n    )\n  }\n\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}